// Code generated by MockGen. DO NOT EDIT.
// Source: ingridients.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "github/culinary_api/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIngredients is a mock of Ingredients interface.
type MockIngredients struct {
	ctrl     *gomock.Controller
	recorder *MockIngredientsMockRecorder
}

// MockIngredientsMockRecorder is the mock recorder for MockIngredients.
type MockIngredientsMockRecorder struct {
	mock *MockIngredients
}

// NewMockIngredients creates a new mock instance.
func NewMockIngredients(ctrl *gomock.Controller) *MockIngredients {
	mock := &MockIngredients{ctrl: ctrl}
	mock.recorder = &MockIngredientsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngredients) EXPECT() *MockIngredientsMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m_2 *MockIngredients) BatchCreate(ctx context.Context, m []*entity.Ingredients) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "BatchCreate", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockIngredientsMockRecorder) BatchCreate(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockIngredients)(nil).BatchCreate), ctx, m)
}

// Create mocks base method.
func (m_2 *MockIngredients) Create(ctx context.Context, m *entity.Ingredients) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIngredientsMockRecorder) Create(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIngredients)(nil).Create), ctx, m)
}

// Get mocks base method.
func (m_2 *MockIngredients) Get(ctx context.Context, m map[string]string) (*entity.Ingredients, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Get", ctx, m)
	ret0, _ := ret[0].(*entity.Ingredients)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIngredientsMockRecorder) Get(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIngredients)(nil).Get), ctx, m)
}

// List mocks base method.
func (m_2 *MockIngredients) List(ctx context.Context, limit, offset uint64, m map[string]string) ([]*entity.Ingredients, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "List", ctx, limit, offset, m)
	ret0, _ := ret[0].([]*entity.Ingredients)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIngredientsMockRecorder) List(ctx, limit, offset, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIngredients)(nil).List), ctx, limit, offset, m)
}

// Update mocks base method.
func (m_2 *MockIngredients) Update(ctx context.Context, m *entity.Ingredients) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIngredientsMockRecorder) Update(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIngredients)(nil).Update), ctx, m)
}

// MockIngredientsRepo is a mock of IngredientsRepo interface.
type MockIngredientsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIngredientsRepoMockRecorder
}

// MockIngredientsRepoMockRecorder is the mock recorder for MockIngredientsRepo.
type MockIngredientsRepoMockRecorder struct {
	mock *MockIngredientsRepo
}

// NewMockIngredientsRepo creates a new mock instance.
func NewMockIngredientsRepo(ctrl *gomock.Controller) *MockIngredientsRepo {
	mock := &MockIngredientsRepo{ctrl: ctrl}
	mock.recorder = &MockIngredientsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngredientsRepo) EXPECT() *MockIngredientsRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockIngredientsRepo) Create(ctx context.Context, m *entity.Ingredients) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIngredientsRepoMockRecorder) Create(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIngredientsRepo)(nil).Create), ctx, m)
}

// FindAll mocks base method.
func (m_2 *MockIngredientsRepo) FindAll(ctx context.Context, limit, offset uint64, m map[string]string) ([]*entity.Ingredients, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "FindAll", ctx, limit, offset, m)
	ret0, _ := ret[0].([]*entity.Ingredients)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIngredientsRepoMockRecorder) FindAll(ctx, limit, offset, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIngredientsRepo)(nil).FindAll), ctx, limit, offset, m)
}

// FindOne mocks base method.
func (m_2 *MockIngredientsRepo) FindOne(ctx context.Context, m map[string]string) (*entity.Ingredients, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "FindOne", ctx, m)
	ret0, _ := ret[0].(*entity.Ingredients)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockIngredientsRepoMockRecorder) FindOne(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockIngredientsRepo)(nil).FindOne), ctx, m)
}

// Update mocks base method.
func (m_2 *MockIngredientsRepo) Update(ctx context.Context, m *entity.Ingredients) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIngredientsRepoMockRecorder) Update(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIngredientsRepo)(nil).Update), ctx, m)
}
