// Code generated by MockGen. DO NOT EDIT.
// Source: cooking_steps.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "github/culinary_api/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCookingSteps is a mock of CookingSteps interface.
type MockCookingSteps struct {
	ctrl     *gomock.Controller
	recorder *MockCookingStepsMockRecorder
}

// MockCookingStepsMockRecorder is the mock recorder for MockCookingSteps.
type MockCookingStepsMockRecorder struct {
	mock *MockCookingSteps
}

// NewMockCookingSteps creates a new mock instance.
func NewMockCookingSteps(ctrl *gomock.Controller) *MockCookingSteps {
	mock := &MockCookingSteps{ctrl: ctrl}
	mock.recorder = &MockCookingStepsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCookingSteps) EXPECT() *MockCookingStepsMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m_2 *MockCookingSteps) BatchCreate(ctx context.Context, m []*entity.CookingSteps) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "BatchCreate", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockCookingStepsMockRecorder) BatchCreate(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockCookingSteps)(nil).BatchCreate), ctx, m)
}

// BatchUpdate mocks base method.
func (m_2 *MockCookingSteps) BatchUpdate(ctx context.Context, m []*entity.CookingSteps) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "BatchUpdate", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdate indicates an expected call of BatchUpdate.
func (mr *MockCookingStepsMockRecorder) BatchUpdate(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdate", reflect.TypeOf((*MockCookingSteps)(nil).BatchUpdate), ctx, m)
}

// Create mocks base method.
func (m_2 *MockCookingSteps) Create(ctx context.Context, m *entity.CookingSteps) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCookingStepsMockRecorder) Create(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCookingSteps)(nil).Create), ctx, m)
}

// Delete mocks base method.
func (m *MockCookingSteps) Delete(ctx context.Context, filter map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCookingStepsMockRecorder) Delete(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCookingSteps)(nil).Delete), ctx, filter)
}

// Get mocks base method.
func (m_2 *MockCookingSteps) Get(ctx context.Context, m map[string]string) (*entity.CookingSteps, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Get", ctx, m)
	ret0, _ := ret[0].(*entity.CookingSteps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCookingStepsMockRecorder) Get(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCookingSteps)(nil).Get), ctx, m)
}

// List mocks base method.
func (m_2 *MockCookingSteps) List(ctx context.Context, limit, offset uint64, m map[string]string) ([]*entity.CookingSteps, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "List", ctx, limit, offset, m)
	ret0, _ := ret[0].([]*entity.CookingSteps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCookingStepsMockRecorder) List(ctx, limit, offset, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCookingSteps)(nil).List), ctx, limit, offset, m)
}

// Update mocks base method.
func (m_2 *MockCookingSteps) Update(ctx context.Context, m *entity.CookingSteps) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCookingStepsMockRecorder) Update(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCookingSteps)(nil).Update), ctx, m)
}

// MockCookingStepsRepo is a mock of CookingStepsRepo interface.
type MockCookingStepsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCookingStepsRepoMockRecorder
}

// MockCookingStepsRepoMockRecorder is the mock recorder for MockCookingStepsRepo.
type MockCookingStepsRepoMockRecorder struct {
	mock *MockCookingStepsRepo
}

// NewMockCookingStepsRepo creates a new mock instance.
func NewMockCookingStepsRepo(ctrl *gomock.Controller) *MockCookingStepsRepo {
	mock := &MockCookingStepsRepo{ctrl: ctrl}
	mock.recorder = &MockCookingStepsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCookingStepsRepo) EXPECT() *MockCookingStepsRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockCookingStepsRepo) Create(ctx context.Context, m *entity.CookingSteps) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCookingStepsRepoMockRecorder) Create(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCookingStepsRepo)(nil).Create), ctx, m)
}

// Delete mocks base method.
func (m *MockCookingStepsRepo) Delete(ctx context.Context, filter map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCookingStepsRepoMockRecorder) Delete(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCookingStepsRepo)(nil).Delete), ctx, filter)
}

// FindAll mocks base method.
func (m_2 *MockCookingStepsRepo) FindAll(ctx context.Context, limit, offset uint64, m map[string]string) ([]*entity.CookingSteps, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "FindAll", ctx, limit, offset, m)
	ret0, _ := ret[0].([]*entity.CookingSteps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockCookingStepsRepoMockRecorder) FindAll(ctx, limit, offset, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockCookingStepsRepo)(nil).FindAll), ctx, limit, offset, m)
}

// FindOne mocks base method.
func (m_2 *MockCookingStepsRepo) FindOne(ctx context.Context, m map[string]string) (*entity.CookingSteps, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "FindOne", ctx, m)
	ret0, _ := ret[0].(*entity.CookingSteps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockCookingStepsRepoMockRecorder) FindOne(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockCookingStepsRepo)(nil).FindOne), ctx, m)
}

// Update mocks base method.
func (m_2 *MockCookingStepsRepo) Update(ctx context.Context, m *entity.CookingSteps) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCookingStepsRepoMockRecorder) Update(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCookingStepsRepo)(nil).Update), ctx, m)
}
